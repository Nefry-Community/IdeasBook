= Nefry BTでﾀﾞｧ ｼｴﾘｲｪｽなIoT
この章ではハンズオンイベントも行った、Nefry BTを使った電車遅延通知ガジェットの作り方を紹介します。私（ポキオ）の愛が少々溢れています。

== 京急は神
私は京急が大好き。
3度の飯より京急。@<b>{京急は神。}

//image[top_2000seriese][2018年3月で引退した往年の名車2000形][scale=0.8]{
//}

===[column] ﾀﾞｧ ｼｴﾘｲｪｽ？

「ﾀﾞｧ ｼｴﾘｲｪｽ」とは京急の「ドア、閉まります」という言葉を文字に起こしたものです。

ネット上（の一部）では、このフレーズが京急の代名詞として有名ですが、実は「ドアを閉まります」ではなく、「ドアを閉めます」とアナウンスすることが多いのも京急の特徴。
これは、ドアの開閉を行う車掌自身が、ホームで放送するためのワイアレスマイクを持ちながらアナウンスしているためです。

もし京急にご乗車の際は、最後尾の車両に乗ってる車掌さんに注目しながら、ドア開閉時のアナウンスに耳を澄ませてみて下さい。

===[/column]

== 遅延情報にエンターテイメントを

京急が大好き過ぎて、京急関連のIoTガジェットをいくつか作ってきました。
そしてほとんどが遅延情報を伝えるガジェットです。

//image[dala_2go][以前作成したESP8266を使ったﾀﾞｧ2号][scale=0.8]{
//}

 * 参考記事: @<href>{https://dotstud.io/blog/pokio-esp-keikyu-chien/}

通勤・通学に電車を使っている方にとって電車遅延は大敵で、天気予報と同じくらい気になる情報の一つです。

もちろん、スマホアプリなどで能動的・受動的に情報を得ることは難しいことではありませんが、あえてアナログな方法で、ちょっとおもしろく運行情報を伝えるガジェットに魅力を感じています。

実用的なんだけど少し可愛い、遅延を検知すると光るガジェットを作ってみましょう！

== 用意するもの

 * 電車のおもちゃ（ダイソーで売ってる「プチ電車」シリーズがオススメ）
 * Nefry BT
 * USB延長ケーブル
 * トレーシングペーパー
 * 両面テープ

===[column] ダイソーの「プチ電車」シリーズを使う理由

//image[nefry_in_train][プチ電車シリーズにピッタリ収まるNefry BT][scale=0.8]{
//}

外装は電車じゃなくても大丈夫ですが、ダイソーの「プチ電車」シリーズを使うと次のようなよさみがあります！

 * 安い
 * Nefry BTがぴったり入る
 * 窓が開いている（肉抜きされてる）ので、電車の中でLEDを光らせるとキレイに光る

悪い点は、京急がラインナップにないことです。

===[/column]


== ﾀﾞｧ ｼｴﾘｲｪｽのプログラム
電車の遅延情報を取得するプログラムを作って、Nefry BTに書き込んでいきます。

まず運行情報は、「鉄道遅延情報のjson（@<href>{https://rti-giken.jp/fhc/api/train_tetsudo/}）」というサイトからデータを取得します。

遅延している路線の一覧をJSON形式で取得できるので、Nefry BTでは@<tt>{HTTPClient}を使って、そのデータを取得します。

あとは取得したデータに監視したい路線名が含まれているかを@<tt>{String#indexOf()}で確認して、それに応じてLEDを光らせます。

//emlist{
#include <Nefry.h>
#include <HTTPClient.h> // HTTP-GETのために必要

void setup() {

}

void loop() {
  String trainDelayJson = getTrainDelayJson();

  //ネットから取得してきた運行状況に指定の文字があるか探します
  if (trainDelayJson.indexOf("京急") > 0) {
    blinkFor30Sec(255, 0, 0); // 赤く光らせる
  } else {
    blinkFor30Sec(0, 0, 255); // 青く光らせる
  }
}

//運行状況をネットから取得し、取得した情報を返す関数
String getTrainDelayJson() {
  String payload = ""; // 運行情報を保存しておく
  HTTPClient http; // HTTP-GETをするために必要な宣言
  int httpCode; // HTTP-GETの結果（int）を保存しておく

  // 運行情報のページにアクセス
  http.begin("http://rti-giken.jp/fhc/api/train_tetsudo/delay.json");

  // その結果を保存
  httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    // 成功だったら、運行情報の文字列を取得して保存
    payload = http.getString();
    Nefry.println("接続成功");
    Nefry.println(payload);
  } else {
    // 失敗だったら、エラーコードをログに出力
    Nefry.println("接続失敗");
    Nefry.println(http.errorToString(httpCode));
  }

  return payload;
}

// 30秒間、500msecおきに点灯と消灯を繰り返します
void blinkFor30Sec(int r, int g, int b) {
  for (int i = 0; i < 30; i++) {
    Nefry.setLed(r, g, b);
    Nefry.ndelay(500);
    Nefry.setLed(0, 0, 0);
    Nefry.ndelay(500);
  }
}
//}

作成したプログラムをNefry BTに書き込みます。

== 組み立て
Nefry BTにプログラムを書き込んだ後は、電車にNefry BTを組み込んでいきましょう！

用意するものに「トレーシングペーパー」がなぜか含まれていますが、これはちゃんと意味があります。

//image[cooking_paper][トレーシングペーパーを貼ると光が拡散する][scale=0.8]{
//}
トレーシングペーパーを電車の窓の部分にかかるように内側から貼ることで、Nefty BTのLEDの光をきれいに拡散してくるようになります。

これをするのとしないのとでは見た目が大きく変わってしまうのでトレーシングペーパーを貼り付けましょう！ご家庭にあるクッキングペーパーで代用できます。

//image[step2][Nefry BTを両面テープで止める][scale=0.8]{
//}
トレーシングペーパーを貼り付けた後は、Nefry BTの裏側に両面テープを取り付けて、電車の天井に貼り付けましょう。

電車に取り付けたあとはPCやモバイルバッテリーとのUSB接続が難しくなってしまいます。
Nefry BTのUSB端子を電車の連結部分から飛び出すように取り付けて、その先にUSB延長ケーブルを接続すると、電源との接続が簡単になります。

Nefry BTにディスプレイがついているとLEDの光が遮られてしまうため、ディスプレイは外してしまいます。

これで組み立ては完了です！

あとはNefry BTを動かして、電車の遅延情報が取得できるか確認しましょう！

== 使い方はあなた次第

この章のコードは京急線の遅延検知をしていますが、@<code>{if (trainDelayJson.indexOf("京急") > 0)}の部分を書き換えれば、他の路線に対応できます。

また、今回はNefry BTの内蔵LEDだけを使っていますが、GPIOやGroveコネクタで接続された別のLEDを光らせることも可能ですので、いろいろ試してみてください。
